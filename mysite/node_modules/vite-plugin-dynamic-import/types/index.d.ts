import type { AcornNode as AcornNode2 } from 'rollup';
export type AcornNode<T = any> = AcornNode2 & Record<string, T>;
import type { Plugin } from 'vite';
export { dynamicImportToGlob } from './dynamic-import-to-glob';
export { type Resolved, Resolve, } from './resolve';
export { toLooseGlob, mappingPath, } from './utils';
export interface Options {
    filter?: (id: string) => false | void;
    /**
     * ```
     * 1. `true` - Match all possibilities as much as possible, more like `webpack`
     * see https://webpack.js.org/guides/dependency-management/#require-with-expression
     *
     * 2. `false` - It behaves more like `@rollup/plugin-dynamic-import-vars`
     * see https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars#how-it-works
     *
     * default true
     * ```
     */
    loose?: boolean;
    /**
     * If you want to exclude some files
     * e.g `type.d.ts`, `interface.ts`
     */
    onFiles?: (files: string[], id: string) => typeof files | void;
    /**
     * It will add `@vite-ignore`
     * `import(/*@vite-ignore* / 'import-path')`
     */
    viteIgnore?: (rawImportee: string, id: string) => true | void;
}
export default function dynamicImport(options?: Options): Plugin;
